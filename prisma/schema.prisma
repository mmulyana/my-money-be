generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Wallet {
  id      String @id @default(ulid())
  name    String
  color   String
  balance BigInt?   @default(0)

  transaction Transaction[]
  budgets     Budget[]
}

model Category {
  id           String          @id @default(ulid())
  name         String
  color        String
  type         TransactionType
  parentId     String?
  imageUrl     String?
  imageVariant String?

  transactions Transaction[]
  budgetItem   budgetItem[]

  parent   Category?  @relation("CategoryToSubcategories", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToSubcategories")
}

model Transaction {
  id         String          @id @default(ulid())
  categoryId String
  walletId   String
  amount     BigInt
  type       TransactionType
  date       DateTime
  remark     String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  budgetItemTransaction BudgetItemTransaction[]
  wishlistTransaction   WishlistTransaction[]

  category Category @relation(fields: [categoryId], references: [id])
  wallet   Wallet   @relation(fields: [walletId], references: [id])
}

enum TransactionType {
  expense
  income
  transfer
}

model Budget {
  id       String   @id @default(ulid())
  name     String
  startAt  DateTime
  endAt    DateTime
  total    BigInt
  walletId String

  items budgetItem[]

  wallet Wallet @relation(fields: [walletId], references: [id])
}

model budgetItem {
  id         String @id @default(ulid())
  categoryId String
  budgetId   String
  planned    BigInt
  actual     BigInt    @default(0)

  budgetItemTransaction BudgetItemTransaction[]

  budget   Budget   @relation(fields: [budgetId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
}

model BudgetItemTransaction {
  id            String   @id @default(ulid())
  budgetItemId  String
  transactionId String
  createdAt     DateTime @default(now())

  budgetItem  budgetItem  @relation(fields: [budgetItemId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@unique([budgetItemId, transactionId])
  @@index([transactionId])
  @@index([budgetItemId])
}

model Wishlist {
  id          String    @id @default(ulid())
  name        String
  description String?
  deadlineAt  DateTime
  doneAt      DateTime?
  createdAt   DateTime  @default(now())

  transaction WishlistTransaction[]
}

model WishlistTransaction {
  id            String @id @default(ulid())
  wishlistId    String
  transactionId String

  wishlist    Wishlist    @relation(fields: [wishlistId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])
}
